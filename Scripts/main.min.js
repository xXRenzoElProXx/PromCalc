var n = function (e) {
    return { floo: e[0], name: e[1], type: e[2], perc: e[3], scor: e[4], sons: [] };
},
    r = function (e, t) {
        for (var a = "", n = 0; n < t; n++) a += e;
        return a;
    },
    f = function (e, t, a, n) {
        for (var s = n || 0; s < e.length; s++)
            if ((e[s][a] + "").toUpperCase() == (t + "").toUpperCase())
                return [s].concat(f(e, t, a, s + 1));
        return [];
    },
    l = function (e, t) {
        for (var a = t || 0; a < e.length - 1; a++)
            if (e[a][0] >= e[a + 1][0]) return [a].concat(l(e, a + 1));
        return [];
    },
    err = function (e) {
        swal("Error", `${gd.label[lang].error}\n${e.message}`, "error");
    },
    slc = function (e, t, a, n, r) {
        var o;
        for (
            s =
            "<select index='" +
            e +
            "' pos='" +
            t +
            "'" +
            (void 0 === r ? "" : " initial='" + r + "'") +
            ">",
            o = a || 0;
            o < n + 1;
            o++
        )
            s +=
                "<option value='" +
                o +
                "'" +
                (r === o ? " selected" : "") +
                ">" +
                o +
                "</option>";
        return s + "</select>";
    },
    dlt = function () {
        for (
            var e = $("#deletables select").val(), t = "<select>", a = 1;
            a <= 2;
            a++
        )
            t +=
                "<option value=" +
                a +
                " " +
                (e == a ? "selected" : "") +
                ">" +
                a +
                "</option>";
        return t + "</select>";
    },
    lang = navigator.language.split("-")[0];
"es" != lang && (lang = "en");
var run,
    opt = "1",
    scores = { chart: void 0, simul: [], deletables: 1 },
    gd = {
        label: {
            es: {
                lang: "Español",
                common: {
                    "#inst":
                        "¿Quieres ver el estado de tu <strong>promedio en un curso</strong> con las notas hasta ahora obtenidas? ¿Quieres ver qué pasaría si tus notas fueran otras? ¿Quieres hacer <strong>simulaciones</strong> y esas cosas? Y sobre todo... ¿Quieres saber <strong>por cuánto te vas al final?</strong> Solo hazle caso a las instrucciones en la imagen de abajo y deja que el programa <strong>evalúe tus notas</strong>.",
                    "#mode>a1[title]": "Inserción de datos simple (solo para la USIL)",
                    "#mode>a2>span": "TODOS",
                    "#mode>a2[title]": "Inserción de datos manual (para todos)",
                    "#input_scores[placeholder]": "Ingresar tabla de notas",
                    ".input_score>input1[placeholder]": "Nivel",
                    ".input_score>input2[placeholder]": "Nombre",
                    ".input_score>input3[placeholder]": "Tipo",
                    ".input_score>input4[placeholder]": "Peso%",
                    ".input_score>input5[placeholder]": "Nota",
                    "#deletables>if": "Si el peso de la nota es 0%, se eliminan las ",
                    "#deletables>smallest": " menores notas del grupo.",
                    "#finalexam": " Este curso no tiene examen final.",
                    finalexam: "Examen Final",
                    "#evaluate": "EVALUAR",
                    "#clear": "LIMPIAR",
                    "#result>.header>.scoreType": "<span>[Peso, Nota]</span>",
                    "#result>.header>.name": "<span>Nombre</span>",
                    "#result>.header>.weight": "Peso",
                    "#result>.header>.score": "Nota",
                    "#apps": "Otras aplicaciones",
                    "#faqr": "Respuestas a preguntas frecuentes",
                    faqr: [
                        "- La herramienta reconoce cuándo una nota se elimina.",
                        "- Sí se redondea la nota de evaluación permanente antes de calcular el promedio.",
                        "- Se reconocen cursos en inglés y español.",
                        "- Si en la esquina del navegador dice 'No es seguro', es solo por la ausencia de 'https' en la url. La página es completamente segura.",
                    ],
                },
                result: {
                    ended: {
                        "#rsltScore":
                            "Todas las notas están llenas: no hay nada que evaluar. Si quieres ver qué hubiera sucedido si tus notas fueran otras, modifícalas con el ingreso de datos manual.",
                        "#neddScore>": "Resultado del curso: ",
                        "#neddScore>span": [
                            "DESAPROBADO",
                            "APROBADO CON LAS JUSTAS",
                            "APROBADO",
                            "EXCELENTE",
                        ],
                    },
                    notended: {
                        "#rsltScore>if": "Si sacaras o hubieras sacado ",
                        "#rsltScore>inthe": " en ",
                        "#rsltScore>then": "tu promedio sería: ",
                        "#neddScore>with":
                            "Con las notas hasta ahora obtenidas, para sacar un ",
                        "#neddScore>yougot": " en el promedio, debes sacar entre ",
                        "#neddScore>and": " y ",
                        "#neddScore>final": " en el examen final.",
                    },
                },
                input: {
                    1: {
                        "#detail>.subtitle": "Instrucciones",
                        "#detail>p":
                            "Primero ingresa a tu infosil, selecciona el curso que deseas evaluar, revisa las notas y selecciona con el mouse desde el inicio hasta donde marca la imagen. Ya sabes qué hacer luego.",
                        "#detail>img[alt]": "Instrucciones para inserción de datos simple",
                    },
                    2: {
                        "#detail>.subtitle": "Instrucciones",
                        "#detail>p":
                            "La columna 'nivel' puede llegar a ser innecesaria en caso tengas el porcentaje de todas tus notas sobre el promedio final. Si es así, 'nivel' siempre será 1. Si tu tabla de notas luce como la de abajo, esta columna tomará distintos valores. <b>PD</b>: Si tienes notas sustitutorias para una evaluación, solo pon la que en verdad cuenta.",
                        "#detail>img[alt]": "Instrucciones para inserción de datos manual",
                    },
                },
                error: "Formato de notas incorrecto",
            },
        },
        input: {
            1: {
                change: function () {
                    gd.input[2].clear();
                },
                clear: function () {
                    $("#input_scores").val("");
                },
                get: function () {
                    var e = function (e, t) {
                        var a = !isNaN(e.substring(t - 9, t - 7)) && "/" === e[t - 7],
                            n = !isNaN(e.substring(t - 6, t - 4)) && "/" === e[t - 4],
                            s =
                                !isNaN(e.substring(t - 3, t)) &&
                                "" != (e[t] || "").trim() &&
                                !isNaN(e[t]);
                        return a && n && s;
                    },
                        t = $("#input_scores").val();
                    scores.deletables = 1;
                    try {
                        var a,
                            n,
                            s = t.split("\n"),
                            r = [];
                        for (a = 0, j = -1; a < s.length; a++)
                            /([a-z]|[0-9])/i.test(s[a].trim()) && (r[++j] = ""),
                                (r[j] += s[a]);
                        return (
                            (s = r.slice(0, -1).map(function (t) {
                                return (function (e) {
                                    var t,
                                        a = [0, "", "", 0, 0],
                                        n = 0;
                                    for (t = 0; t < e.length && " " == e[t];) t++, n++;
                                    for (
                                        "PROMEDIO" !== e.substring(0, 8) && (n += 4),
                                        a[0] = parseInt(n / 4),
                                        e = e.trim(),
                                        t = -1;
                                        ++t < e.length;

                                    )
                                        if (" " == e[t]) {
                                            if (!isNaN(e[t + 1])) {
                                                "0" == e[t + 1] && t++, (t += 2);
                                                break;
                                            }
                                        } else if (!isNaN(e[t])) {
                                            "0" == e[t] && t++;
                                            break;
                                        }

                                    // Extract name
                                    a[1] = e.substring(0, t);
                                    e = e.substring(t);

                                    // Extract type - Add this new parsing for type
                                    a[2] = "General"; // Default type if not specified

                                    // Continue with weight and score parsing
                                    t = -1;
                                    while (++t < e.length && "." != e[t]);

                                    if (t != e.length)
                                        (a[4] =
                                            Math.round(100 * parseFloat(e.substring(0, t + 3))) /
                                            100),
                                            (t += 3);
                                    else for (a[4] = 0, t = -1; ++t < e.length && isNaN(e[t]););

                                    e = e.substring(t);
                                    (a[3] =
                                        0 == e.length
                                            ? 0
                                            : Math.round(
                                                100 * parseFloat(e.substring(0, e.length - 2))
                                            ) / 100);

                                    return a;
                                })(
                                    (function (t) {
                                        for (
                                            var a =
                                                (t = (t = t.replace(/[\t]/g, "")).replace(/-/g, ""))
                                                    .length + 1,
                                            n = a - 1;
                                            --a > 9;

                                        )
                                            e(t, a) && (n = a -= 9);
                                        return t.substring(0, n);
                                    })(t)
                                );
                            })).push([0, "PROMEDIO", "Final", 100, 0]),
                            (n =
                                f(s, "Reclamo Examen Parcial", 1)[0] ||
                                f(s, "Mid Term Reassessment", 1)[0]) &&
                            (0 != s[n][4] &&
                                (s[
                                    f(s, "Examen Parcial", 1)[0] || f(s, "Mid Term Exam", 1)[0]
                                ][4] = s[n][4]),
                                s.splice(n, 1)),
                            (n =
                                f(s, "Reclamo Examen Final", 1)[0] ||
                                f(s, "Final Reassessment", 1)[0]) &&
                            (0 != s[n][4] &&
                                (s[
                                    f(s, "Examen Final", 1)[0] || f(s, "Final Exam", 1)[0]
                                ][4] = s[n][4]),
                                s.splice(n, 1)),
                            s
                        );
                    } catch (e) {
                        err(e);
                    }
                },
                evaluate: function () {
                    return (
                        (scores.chart = run(scores.chart)),
                        (scores.simul = scores.chart.map(function (e) {
                            return e.slice();
                        })),
                        scores.chart
                    );
                },
            },
            2: {
                change: function () {
                    gd.input[1].clear();
                },
                clear: function () {
                    $("#block_scores").html(""),
                        $("#input>[opt=2]>.input_score.variable input").val(""),
                        $("#input>[opt=2]>.input_score.static input:nth-child(3)").val(""),
                        $("#input>[opt=2]>.input_score.static input:nth-child(4)").val(""),
                        $("#input>[opt=2]>.input_score.static input:nth-child(5)").val("");
                },
                get: function () {
                    if (!$("#input")[0].checkValidity())
                        return document.forms.input.reportValidity(), [];
                    scores.deletables = $("#deletables select").val();
                    var e,
                        t,
                        a,
                        b,
                        n,
                        s,
                        r = !$("#finalexam input").is(":checked"),
                        o = $("#input .input_score" + (r ? "" : ".variable")),
                        l = [];
                    for (i = 0; i < o.length; i++)
                        (s = $("input", o[i])),
                            (e = parseInt((s[0].value || "").trim() || 0)),
                            (t = (s[1].value || "").trim()),
                            (a = (s[2].value || "").trim() || "General"),
                            (b = (s[3].value || "").trim()),
                            (b = parseFloat(b || 0)),
                            (n = (s[4].value || "").trim()),
                            (n = parseFloat(n || 0)),
                            l.push([e, t, a, b, n]);
                    return l.push([0, "PROMEDIO", "Final", 100, 0]), l;
                },
                evaluate: function () {
                    return gd.input[1].evaluate();
                },
            },
        },
    },
    label = gd.label[lang],
    input = gd.input[opt];
(run = function (e) {
    var t = function (e) {
        for (
            var a = n(e[0]), s = 1;
            s < e.length &&
            (e[s][0] == a.floo + 1 && a.sons.push(t(e.slice(s, e.length))),
                !(e[s][0] <= a.floo));
            s++
        );
        return a;
    },
        a = function (e) {
            if (0 != e.sons.length) {
                var t,
                    n,
                    s = !1,
                    r = 0,
                    o = 21,
                    l = -1,
                    i = 100;
                for (t = 0; t < e.sons.length; t++)
                    (n = a(e.sons[t])),
                        0 !== e.sons[t].perc
                            ? (r += n * (Math.round(0.01 * e.sons[t].perc * 1e4) / 1e4))
                            : ((s = !0), (r += n), n < o && ((o = n), (l = t)));
                if (s) {
                    if (2 == scores.deletables) {
                        var c = 21;
                        for (t = 0; t < e.sons.length; t++)
                            t != l && e.sons[t].scor < c && (c = e.sons[t].scor);
                        o += c;
                    }
                    r = (r - o) / (e.sons.length - scores.deletables);
                }
                1 == e.floo && (i = 1),
                    (e.scor = parseFloat(parseFloat(Math.round(r * i) / i).toFixed(2)));
            }
            return e.scor;
        },
        s = function (e) {
            var t = [];
            if (0 != e.sons.length)
                for (var a = 0; a < e.sons.length; a++) t = t.concat(s(e.sons[a]));
            return [[e.floo, e.name, e.type, e.perc, e.scor]].concat(t);
        };
    try {
        e = e.slice(-1).concat(e.slice(0, -1));
        var r = t(e);
        return a(r), (e = (e = s(r)).slice(1).concat([e[0]]));
    } catch (e) {
        err(e);
    }
}),
    $(document).ready(function () {
        var e = "";
        for (var t in gd.label)
            e += "<option value='" + t + "'>" + gd.label[t].lang + "</option>";
        $("#language").html(e), $("#deletables select").html(dlt());
    }),
    $("#mode").on("click", "a", function (e) {
        e.preventDefault(),
            (opt = $(this).attr("opt")),
            (input = gd.input[opt]),
            $("#detail>.subtitle").html(label.input[opt]["#detail>.subtitle"]),
            $("#detail>p").html(label.input[opt]["#detail>p"]);
        var t = $("#detail>img").attr("src").split("/");
        (t[t.length - 2] = lang),
            $("#detail>img").attr("src", t.join("/")),
            $("#detail>img").attr("alt", label.input[opt]["#detail>img[alt]"]),
            $(this).hasClass("active") ||
            ($("#mode>a").removeClass("active"),
                $(this).addClass("active"),
                input.change(),
                $("#input>[opt]").hide(),
                $("#input>[opt=" + opt + "]").show());
    }),
    $("#input").ready(function () {
        $(this).on("click", ".delete", function (e) {
            if ((e.preventDefault(), $(this).parents("#block_scores").length > 0))
                $(this).parent().remove();
            else {
                var t = $("#block_scores .input_score:last-child"),
                    a = $(this).siblings("input");
                (a[0].value = $("[name=level]", t).val() || ""),
                    (a[1].value = $("[name=name]", t).val() || ""),
                    (a[2].value = $("[name=type]", t).val() || ""),
                    (a[3].value = $("[name=weight]", t).val() || ""),
                    (a[4].value = $("[name=score]", t).val() || ""),
                    t.remove();
            }
        }),
            $(this).on("click", ".add", function (e) {
                e.preventDefault();
                var t = $("#input>[opt=2]>.input_score.variable").clone();
                if (
                    ($("input", t).val(""), $(this).parents("#block_scores").length > 0)
                )
                    $(this).parent().after(t);
                else {
                    var a = $(this).siblings("input");
                    $("[name=level]", t).val(a[0].value),
                        $("[name=name]", t).val(a[1].value),
                        $("[name=type]", t).val(a[2].value),
                        $("[name=weight]", t).val(a[3].value),
                        $("[name=score]", t).val(a[4].value),
                        $("#block_scores").append(t),
                        a.val("");
                }
            }),
            $(this).on("click", "#finalexam input[type=checkbox]", function () {
                $("#input>[opt=2]>.input_score.static").css({
                    display: $(this).is(":checked") ? "none" : "block",
                });
            });
    }),
    $("#control").ready(function () {
        var e = function () {
            try {
                var e,
                    t = input.evaluate(),
                    a = "";

                for (e = 0; e < t.length; e++) {
                    var level = t[e][0] - 1;
                    var basePadding = 16;
                    var indentation = level > 0 ? basePadding + (level * 20) : basePadding;

                    var rowClass = e == t.length - 1 ? "average table-secondary" : "";

                    a += "<tr class='" + rowClass + "'>" +
                        "<td class='nombre' style='padding-left: " + indentation + "px'>" + t[e][1] + "</td>" +
                        "<td class='peso'>" + t[e][3] + "%</td>" +
                        "<td class='nota'>" + t[e][4] + "</td>" +
                        "</tr>";
                }

                $("#chart").html(a);

                var n = "",
                    s = "",
                    o = [],
                    i = f(t, "Examen Final", 1)[0] || f(t, "Final Exam", 1)[0],
                    c = t[i],
                    u = "<div class='mb-3'>",
                    d = "</div>";

                if (void 0 !== c && 0 != c[4]) {
                    n += u + label.result.ended["#rsltScore"] + d;
                    var p = t[t.length - 1][4],
                        h = [10.5, 11, 17];
                    for (e = -1; e < 3 && h[++e] <= p;);
                    s +=
                        u +
                        label.result.ended["#neddScore>"] +
                        "<span stts='" +
                        (e + 1) +
                        "'>" +
                        label.result.ended["#neddScore>span"][e] +
                        "</span>" +
                        d;
                } else {
                    var m = label.result.notended["#rsltScore>inthe"];
                    if (
                        ((o = l(t).map(function (e, a) {
                            return (
                                u + slc(e, a, 0, 20, t[e][4]) + m + "'" + t[e][1] + "'," + d
                            );
                        })),
                            (n +=
                                u +
                                label.result.notended["#rsltScore>if"] +
                                d +
                                o.join("") +
                                u +
                                label.result.notended["#rsltScore>then"] +
                                "<span id='resultScore'>" +
                                t[t.length - 1][4] +
                                "</span>" +
                                d),
                            void 0 !== c)
                    ) {
                        var g = i,
                            v = 0.01 * t[g][3],
                            b = t[g][0];
                        for (e = g - 1; e > -1; e--)
                            t[e][0] < b && ((v *= 0.01 * t[e][3]), (b = t[e][0]));
                        var y = 20 * v,
                            S = t[t.length - 1][4];
                        for (
                            y = parseInt(S + y) + (S + y - parseInt(S + y) < 0.5 ? 0 : 1),
                            e = 0;
                            e < 21;
                            e++
                        )
                            if (e > S) {
                                S = e;
                                break;
                            }
                        var w = parseInt(((S - t[t.length - 1][4] - 0.5) / v) * 100) / 100,
                            I = parseInt(((S - t[t.length - 1][4] + 0.49) / v) * 100) / 100;
                        w < 0 && (w = 0),
                            I > 20 && (I = 20),
                            (s +=
                                u +
                                label.result.notended["#neddScore>with"] +
                                slc(g, 0, S, y) +
                                label.result.notended["#neddScore>yougot"] +
                                "<span id='neededScore'>" +
                                Math.ceil(w) +
                                label.result.notended["#neddScore>and"] +
                                Math.floor(I) +
                                "</span>" +
                                label.result.notended["#neddScore>final"] +
                                d);
                    }
                }
                $("#rsltScore .result-content").html(n),
                    $("#neddScore .result-content").html(s),
                    $("#result").css({ display: "block" });
            } catch (e) {
                err(e);
            }
        };

        $(this).on("click", "#clear", function (e) {
            e.preventDefault(), input.clear();
        }),
            $(this).on("click", "#evaluate", function (t) {
                t.preventDefault();
                var a = input.get() || [];
                a.length <= 2 ? (scores.deletables = 1) : ((scores.chart = a), e());
            });
    });
$("#rsltScore").on("change", "select", function () {
    var e = parseInt($(this).attr("index"));
    (scores.simul[e][4] = parseInt($(this).val())),
        (scores.simul = run(scores.simul)),
        $("span#resultScore").html(
            (1e3 * scores.simul[scores.simul.length - 1][4]) / 1e3
        );
}),
    $("#neddScore").on("change", "select", function () {
        for (
            var e = parseInt($(this).attr("index")),
            t = $(this).val(),
            a = scores.chart[scores.chart.length - 1][3],
            n = scores.chart[e][2],
            s = scores.chart[e][0],
            r = e - 1;
            r > -1;
            r--
        )
            scores.chart[r][0] < s &&
                ((n *= 0.01 * scores.chart[r][2]), (s = scores.chart[r][0]));
        var o = parseInt(((t - a - 0.5) / n) * 100 * 100) / 100,
            l = parseInt(((t - a + 0.49) / n) * 100 * 100) / 100;
        o < 0 && (o = 0),
            l > 20 && (l = 20),
            $("span#neededScore").html(
                Math.ceil(o) + label.result.notended["#neddScore>and"] + Math.floor(l)
            );
    });
